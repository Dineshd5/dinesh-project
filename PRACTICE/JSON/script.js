let json1 = " Dave";
let json2 = 4;
let json3 = true;
let json4 = [4, 5, 6, 7];
let json5 = {
  stock: "TCS",
  price: 3500,
};
let json6 = `[
  {
    "stock": "TCS",
    "price": 3500  
  },
  {
    "stock": "HCL",
    "price": 2500
  },
    {
    "stock": "TCS",
    "price": 3500
  } 
]`;
console.log(json6);
// This logs the `json6` variable (a JSON string) to the console to check its content.

let parsed = JSON.parse(json6);
// This parses the JSON string stored in `json6` into a JavaScript object or array,
// storing the result in the variable `parsed`.

console.log(parsed[1].price);
// This logs the `price` value of the second element in the parsed array (since arrays in JavaScript
// are zero-indexed, `parsed[1]` refers to the second element). The price property is accessed from
// this object.

console.log(JSON.stringify(parsed));
// The `JSON.stringify(parsed)` method converts the JavaScript object (or array) `parsed` back into a JSON string.
// This is useful when you need to convert an object into a JSON format for storage, transmission, or logging.
// The result is logged to the console so you can see the JSON string version of the `parsed` object.

fetch("https://official-joke-api.appspot.com/jokes/programming/random")
  // This fetch function sends a GET request to the given URL, which is an API endpoint for programming jokes.
  // It retrieves a random programming joke in JSON format.

  .then((res) => res.json())
  // The first .then() method handles the response from the server.
  // 'res' is the response object, and res.json() parses the response as JSON,
  // converting it into a JavaScript object or array for further processing.

  .then((msg) => console.log(msg[0].setup, msg[0].punchline))
  // The second .then() method is executed after the response is successfully parsed.
  // 'msg' is the parsed JSON data (an array of joke objects).
  // We access the first joke (msg[0]) and log the 'setup' and 'punchline' properties to the console.

  .catch((err) => console.log(err));
// The .catch() method is used to handle any errors that occur during the fetch operation.
// If there is an error (e.g., network issue), it will log the error message to the console.

// URL of the resource to which you want to send the POST request
const url = "https://jsonplaceholder.typicode.com/todos";

// Data to be sent in the request body
const postData = {
  userId: 22, // User ID for the new todo
  id: 456, // ID of the new todo (usually auto-generated by the server)
  title: "test", // Title of the new todo
  completed: false, // Status of the new todo
};

// Perform a POST request to create a new resource
fetch(url, {
  method: "POST", // Specify the HTTP method as POST for creating a resource
  headers: {
    "Content-Type": "application/json", // Set the content type to JSON
  },
  body: JSON.stringify(postData), // Convert the data object to a JSON string
})
  .then((response) => {
    if (!response.ok) {
      throw new Error("Network response was not ok"); // Throw an error if the response status is not OK
    }
    return response.json(); // Parse the response as JSON
  })
  .then((json) => console.log(json)); // Log the created resource data
